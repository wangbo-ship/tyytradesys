{"version":3,"file":"js/319.0a070e48.js","mappings":"oOAiBO,SAASA,EAAUC,EAAKC,GAC7B,MAAMC,EAAQ,iEAAiEC,MAAM,IAC/EC,EAAO,GAGb,GAFAH,EAAQA,GAASC,EAAMG,OAEnBL,EAEF,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAKM,IAAKF,EAAKE,GAAKJ,EAAM,EAAIK,KAAKC,SAAWP,OAC7D,CAEL,IAAIQ,EAGJL,EAAK,GAAKA,EAAK,IAAMA,EAAK,IAAMA,EAAK,IAAM,IAC3CA,EAAK,IAAM,IAIX,IAAK,IAAIE,EAAI,EAAGA,EAAI,GAAIA,IACjBF,EAAKE,KACRG,EAAI,EAAoB,GAAhBF,KAAKC,SACbJ,EAAKE,GAAKJ,EAAa,KAANI,EAAiB,EAAJG,EAAW,EAAMA,GAGrD,CACA,OAAOL,EAAKM,KAAK,KAAM,IAAIC,MAAOC,SACpC,CAeO,SAASC,EAAgBC,GAE9B,MAAMC,EAAOD,EAAOT,OACdW,EAAOF,EAAO,GAAGT,OAGjBY,EAAmB,GAGzB,IAAK,IAAIX,EAAI,EAAGA,EAAIU,EAAMV,IACxBW,EAAiBC,KAAK,IAIxB,IAAK,IAAIZ,EAAI,EAAGA,EAAIS,EAAMT,IACxB,IAAK,IAAIa,EAAI,EAAGA,EAAIH,EAAMG,IACxBF,EAAiBE,GAAGb,GAAKQ,EAAOR,GAAGa,GAIvC,OAAOF,CACT,CAGO,SAASG,EAAeC,GAC7B,OAAQA,EAAIC,UACV,KAAK,EACH,OAAOD,EAAIE,SACb,KAAK,EACL,KAAK,EACL,KAAK,EACH,OAAOF,EAAIG,QACb,KAAK,EACH,OAAOH,EAAII,WACb,KAAK,EACH,OAAOJ,EAAIK,WACb,KAAK,EACH,OAAOL,EAAIM,SACb,KAAK,EACH,OAAON,EAAIO,SACb,KAAK,GACH,OAAOP,EAAIQ,aACb,KAAK,GACH,OAAOR,EAAIS,SACb,QACE,OAAO,KAEb,CAGO,SAASC,EAAWC,GACzB,OAAOA,GACL,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACL,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,GACT,KAAK,GACH,OAAO,EACT,KAAK,GACH,OAAO,GACT,KAAK,GACH,OAAO,EACT,KAAK,GACH,OAAO,EACT,QACE,OAAO,EAEb,C","sources":["webpack://tyy_trade/./src/utils/common.js"],"sourcesContent":["//清空包含数组和嵌套对象的对象\r\nexport function clearForm(obj) {\r\n    for (let key in obj) {\r\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\r\n        // 如果值是对象，则递归清空对象内部的键值对\r\n        clearForm(obj[key]);\r\n      } else if (Array.isArray(obj[key])) {\r\n        // 如果值是数组，则将数组清空为一个空数组\r\n        obj[key] = [];\r\n      } else {\r\n        // 否则，将键的值置为空\r\n        obj[key] = '';\r\n      }\r\n    }\r\n}\r\n\r\n//生成随机数\r\nexport function randomNum(len, radix) {\r\n  const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('')\r\n  const uuid = []\r\n  radix = radix || chars.length\r\n\r\n  if (len) {\r\n    // Compact form\r\n    for (let i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix ]\r\n  } else {\r\n    // rfc4122, version 4 form\r\n    let r\r\n\r\n    // rfc4122 requires these characters\r\n    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-'\r\n    uuid[14] = '4'\r\n\r\n    // Fill in random data.  At i==19 set the high bits of clock sequence as\r\n    // per rfc4122, sec. 4.1.5\r\n    for (let i = 0; i < 36; i++) {\r\n      if (!uuid[i]) {\r\n        r = 0 | Math.random() * 16\r\n        uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r]\r\n      }\r\n    }\r\n  }\r\n  return uuid.join('') + new Date().getTime()\r\n}\r\n\r\n//获取给定时间戳的对应日期\r\nexport function getDateTime(time) {\r\n  const dt = new Date(time * 1000);\r\n  const year = dt.getFullYear();\r\n  const month = String(dt.getMonth() + 1).padStart(2, '0');\r\n  const day = String(dt.getDate()).padStart(2, '0');\r\n  const hours = String(dt.getHours()).padStart(2, '0');\r\n  const minutes = String(dt.getMinutes()).padStart(2, '0');\r\n  const seconds = String(dt.getSeconds()).padStart(2, '0');\r\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\n//二维数组翻转\r\nexport function transposeMatrix(matrix) {\r\n  // 获取原始二维数组的行数和列数\r\n  const rows = matrix.length;\r\n  const cols = matrix[0].length;\r\n\r\n  // 创建一个新的二维数组来存放翻转后的结果\r\n  const transposedMatrix = [];\r\n\r\n  // 初始化翻转后的二维数组，将行数和列数互换\r\n  for (let i = 0; i < cols; i++) {\r\n    transposedMatrix.push([]);\r\n  }\r\n\r\n  // 遍历原始二维数组，将行与列交换，得到翻转后的结果\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let j = 0; j < cols; j++) {\r\n      transposedMatrix[j][i] = matrix[i][j];\r\n    }\r\n  }\r\n\r\n  return transposedMatrix;\r\n}\r\n\r\n//通过dataType返回对应的值\r\nexport function getValueByType(obj) {\r\n  switch (obj.dataType) {\r\n    case 1:\r\n      return obj.dataBool;\r\n    case 3:\r\n    case 4:\r\n    case 5:\r\n      return obj.dataInt;\r\n    case 6:\r\n      return obj.dataReal32;\r\n    case 7:\r\n      return obj.dataReal64;\r\n    case 8:\r\n      return obj.dataText;\r\n    case 9:\r\n      return obj.dataBlob;\r\n    case 10:\r\n      return obj.dataGeometry;\r\n    case 11:\r\n      return obj.dataTime;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n//目标表类型与mdb类型映射(根据fieldType映射dataType)\r\nexport function mdbMapping(fieldType){\r\n  switch(fieldType){\r\n    case 0:\r\n      return 3;\r\n    case 1:\r\n      return 4;\r\n    case 2:\r\n      return 5;\r\n    case 3:\r\n      return 6; \r\n    case 4:\r\n      return 7; \r\n    case 5: \r\n      return 1;\r\n    case 6:\r\n    case 7:\r\n      return 2;\r\n    case 8:\r\n      return 8;\r\n    case 9:\r\n      return 11;\r\n    case 10:\r\n      return 9;\r\n    case 11:\r\n      return 10;\r\n    case 12:\r\n      return 5;\r\n    case 13:\r\n      return 8;\r\n    default:\r\n      return 0;\r\n  }\r\n}"],"names":["randomNum","len","radix","chars","split","uuid","length","i","Math","random","r","join","Date","getTime","transposeMatrix","matrix","rows","cols","transposedMatrix","push","j","getValueByType","obj","dataType","dataBool","dataInt","dataReal32","dataReal64","dataText","dataBlob","dataGeometry","dataTime","mdbMapping","fieldType"],"sourceRoot":""}