{"version":3,"file":"js/772.99f9989d.js","mappings":"6JAKA,MAAMA,EAAUC,IAAAA,OAAa,CACzBC,QAASC,8BACTC,QAAS,MASbJ,EAAQK,aAAaC,QAAQC,KACxBC,GAMUA,IAEVC,IACGC,QAAQC,IAAIF,GACLG,QAAQC,OAAOJ,MAI9BT,EAAQK,aAAaS,SAASP,KAGzBQ,GACqB,MAAfA,EAAIC,OACIJ,QAAQK,QAAQF,GAEhBH,QAAQC,OAAOE,KAI7BN,IAEMA,EAAMK,SAASE,SACe,MAA1BP,EAAMK,SAASE,QACdE,EAAAA,EAAAA,SAAQ,CACJC,QAAQ,YACRC,KAAM,QACNC,SAAU,OAGdH,EAAAA,EAAAA,SAAQ,CACJC,QAAS,QAAOL,SAASE,SACzBI,KAAM,QACNC,SAAU,OAIfT,QAAQC,OAAOJ,MAI9B,K","sources":["webpack://tyy_trade/./src/utils/httpRequest.js"],"sourcesContent":["import store from \"@/store\";\r\nimport axios from \"axios\";\r\nimport {  Message } from \"element-ui\";\r\n\r\n\r\nconst service = axios.create({\r\n    baseURL: process.env.VUE_APP_HTTP_BASE_URL,\r\n    timeout: 50000,\r\n});\r\n\r\n//所有请求设置了授权头信息【请求头中设置cookie信息，一直携带，判权】\r\n// axios.defaults.headers.common['Authorization'] = localStorage.getItem('tyytrade-web_TOKEN');\r\n//这里是设置发送json格式参数\r\n// axios.defaults.headers.post['Content-Type'] = 'application/json';\r\n\r\n//请求拦截\r\nservice.interceptors.request.use(\r\n    (config) => {\r\n        //请求前处理\r\n        // if(store.getters.token) {\r\n        //     //这里的getToken方法需要引入auth.js\r\n        //     config.headers['token'] = getToken()\r\n        // }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.log(error);\r\n        return Promise.reject(error);\r\n    }\r\n)\r\n//响应拦截\r\nservice.interceptors.response.use(\r\n    //请求成功\r\n    // res => res.status === 200 ? Promise.resolve(res) : Promise.reject(res),\r\n    (res) => {\r\n        if(res.status === 200) {\r\n            return Promise.resolve(res)\r\n        } else {\r\n            return Promise.reject(res)\r\n        }\r\n    },\r\n    //请求失败\r\n    (error) => {\r\n        //可根据不同的状态去区分不同的错误，达到不同效果\r\n        if(error.response.status){\r\n            if(error.response.status === 404) {\r\n                Message({\r\n                    message:'404请求不存在！',\r\n                    type: \"error\",\r\n                    duration: 2 * 1000,\r\n                })\r\n            } else {\r\n                Message({\r\n                    message:`其他错误:${response.status}`,\r\n                    type: \"error\",\r\n                    duration: 2 * 1000,\r\n                })\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default service;\r\n\r\n"],"names":["service","axios","baseURL","process","timeout","interceptors","request","use","config","error","console","log","Promise","reject","response","res","status","resolve","Message","message","type","duration"],"sourceRoot":""}